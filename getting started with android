###### Note for QA: 
You might find it useful to use uiautomatorviewer to inspect gui components in order to find element ids. 
uiautomatorviewer is a GUI tool that allows you to scan and analyze the UI components of an Android application.
 
 // screenshot

1. Change directory to <android-sdk>/tools

2. Open a terminal window and run “uiautomatorviewer”

3. Make sure your Android device is connected, and the screen of interest is displayed

4. Click on “Device screenshot” button

5. Inspect the layout hierarchy and view the properties of individual UI components

##### To automate, or not to automate? that is the question.
Although automation 

##### Why Espresso?
Ofcourse, Espresso isn't the only UI testing framework available for Android, but it has some caracthestics that makes it a good choice over its peers.
 - Espresso has a small, predictable, and easy to learn API
 - The API is open for customization
 - Espresso tests run optimally fast (no waits, sleeps, etc)
 - Espresso tests interactions, expectations, and assertions without boilerplate content or messy implementation details.
 - Android Studio + Gradle support.

 ##### Adding Espresso to your project
1. First of all make sure you have Android Support Repository installed
  
  // screenshot

2. Add the following dependencies to your application build.gradle file
dependencies {  
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'
}

##### The main components of Espresso
Espresso has 3 main components that you'll use day by day to write tests. Once you understood these components, like their purpse, when to use one over another, you should be able to write tests without any problems. ????????? 

and these components are:
- ViewMatchers - allows you to locate a view in the current view hierarchy        
- ViewActions - allows you to interact with views                                                
- ViewAssertions - allows you to assert the state of currently selected view.     

For simplicity, you may use these shortcuts to refer to them:
ViewMatchers - "find something"
ViewActions - "do something"
ViewAssertions - "check something"

And, for example when you will need to *check* something on your screen, you'll know you'll need a ViewAssertion for that.

// example test with main components highlited 

Some of the common methods that these components expose, are:

// screen shot.

##### A simple test using onView()
// screenshot 
// example
onView(withId(R.id.user_name)).perform(typeText("John"));
onView(withId(R.id.next)).perform(click());
onView(withId(R.id.greeting_message)).check(matches(withText("Hello John!")));

---> Create class in res/androiTest?
public class SimpleNameTest extends ActivityInstrumentationTestCase2<NameActivity> {

    public SimpleNameTest() {  super(NameActivity.class);   }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        getActivity();
    }

    public void testEnterName() {
        onView(withId(R.id.user_name)).perform(typeText("John"));
        onView(withId(R.id.next)).perform(click());
        onView(withId(R.id.greeting_message)).check(matches(withText("Hello John!")));
    }
}
// list key factors about this class (prefix with "test")
##### A simple test using onView()


##### A simple test using onData()
Whenever you have a ListView, GridView, Spinner, and other Adapter based views, you'll have to use onData(), in order to interact with an item from that list. 
When working with onData() basically you are working directly with the data provided by your Adapter.

##### Common tests:
1. Typing a text in the SearchView:
onView(isAssignableFrom(EditText.class)).perform(typeText("4545"), pressImeActionButton());
